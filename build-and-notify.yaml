name: Build and Notify

on:
  workflow_call:
    outputs:
      artifact_name:
        description: "Uploaded artifact name"
        value: ${{ jobs.build_and_notify.outputs.artifact_name }}
      slack_ts:
        description: "Slack message timestamp"
        value: ${{ jobs.build_and_notify.outputs.slack_ts }}
    secrets:
      SLACK_BOT_TOKEN_CI:
        required: true

jobs:
  build_and_notify:
    runs-on: self-hosted
    outputs:
      artifact_name: ${{ steps.upload.outputs.artifact_name }}
      slack_ts: ${{ steps.slack.outputs.slack_ts }}

    steps:
      - name: Checkout pt-zh-web repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Identify and build changed projects
        run: |
          pnpm ls --depth -1 --json --filter "[${{ github.event.before }}...${{ github.sha }}]" > packages.json
          node scripts/ci/build-changed-projects.js

      - name: Upload built dist folders as artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.sha }}
          path: ./artifacts/**

      - name: Save artifact name as output
        run: echo "artifact_name=dist-artifacts-${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Notify Slack with summary
        id: slack
        env:
          SLACK_BOT_TOKEN_CI: ${{ secrets.SLACK_BOT_TOKEN_CI }}
        run: |
          SUMMARY=$(cat build-summary.json)

          BUILT=$(echo "$SUMMARY" | jq -r '.built[]?' | sed 's/^/- /' | paste -sd '\n' -)
          FAILED=$(echo "$SUMMARY" | jq -r '
            if (.failed | length) > 0 then
              .failed[] | "- " + (.name // "unknown") + ": " + (.reason // "no reason") + "\n" + (.detail // "")
            else
              empty
            end
          ' | paste -sd '\n\n' -)

          [ -z "$BUILT" ] && BUILT="(none)"
          [ -z "$FAILED" ] && FAILED="(none)"

          FAIL_COUNT=$(echo "$SUMMARY" | jq '.failed | length')

          if [ "$FAIL_COUNT" -gt 0 ]; then
            TEXT="‚ùå CI build failed on branch *${{ github.ref_name }}*"
          else
            TEXT="‚úÖ CI build succeeded on branch *${{ github.ref_name }}*"
          fi

          MESSAGE=$(echo -e "$TEXT\n\n*Projects built:*\n$BUILT\n\n*Failures:*\n$FAILED")

          CHANNEL_ID="C08TGT4TBGT"
          SLACK_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN_CI" \
            -H "Content-type: application/json" \
            --data "$(jq -n --arg channel "$CHANNEL_ID" --arg text "$MESSAGE" '{channel: $channel, text: $text}')" \
            https://slack.com/api/chat.postMessage)

          TIMESTAMP=$(echo "$SLACK_RESPONSE" | jq -r '.ts // empty')
          if [ -n "$TIMESTAMP" ]; then
            echo "üïí Slack message timestamp: $TIMESTAMP"
            echo "slack_ts=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          else
            echo "‚ö†Ô∏è Failed to extract timestamp from response: $SLACK_RESPONSE"
          fi
